{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar withStyles_1 = __importDefault(require(\"@material-ui/core/styles/withStyles\"));\n\nvar keycode_1 = __importDefault(require(\"keycode\"));\n\nvar PropTypes = __importStar(require(\"prop-types\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar react_event_listener_1 = __importDefault(require(\"react-event-listener\"));\n\nvar date_utils_1 = require(\"../../_helpers/date-utils\");\n\nvar WithUtils_1 = require(\"../../_shared/WithUtils\");\n\nvar prop_types_1 = __importDefault(require(\"../../constants/prop-types\"));\n\nvar CalendarHeader_1 = __importDefault(require(\"./CalendarHeader\"));\n\nvar Day_1 = __importDefault(require(\"./Day\"));\n\nvar DayWrapper_1 = __importDefault(require(\"./DayWrapper\"));\n\nvar SlideTransition_1 = __importDefault(require(\"./SlideTransition\"));\n\nvar Calendar =\n/** @class */\nfunction (_super) {\n  __extends(Calendar, _super);\n\n  function Calendar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      slideDirection: 'left',\n      currentMonth: _this.props.utils.getStartOfMonth(_this.props.date)\n    };\n\n    _this.onDateSelect = function (day, isFinish) {\n      if (isFinish === void 0) {\n        isFinish = true;\n      }\n\n      var _a = _this.props,\n          date = _a.date,\n          utils = _a.utils;\n\n      _this.props.onChange(utils.mergeDateAndTime(day, date), isFinish);\n    };\n\n    _this.handleChangeMonth = function (newMonth, slideDirection) {\n      _this.setState({\n        currentMonth: newMonth,\n        slideDirection: slideDirection\n      });\n    };\n\n    _this.validateMinMaxDate = function (day) {\n      var _a = _this.props,\n          minDate = _a.minDate,\n          maxDate = _a.maxDate,\n          utils = _a.utils;\n      return minDate && utils.isBeforeDay(day, utils.date(minDate)) || maxDate && utils.isAfterDay(day, utils.date(maxDate));\n    };\n\n    _this.shouldDisablePrevMonth = function () {\n      var _a = _this.props,\n          utils = _a.utils,\n          disablePast = _a.disablePast,\n          minDate = _a.minDate;\n      var now = utils.date();\n      return !utils.isBefore(utils.getStartOfMonth(disablePast && utils.isAfter(now, minDate) ? now : utils.date(minDate)), _this.state.currentMonth);\n    };\n\n    _this.shouldDisableNextMonth = function () {\n      var _a = _this.props,\n          utils = _a.utils,\n          disableFuture = _a.disableFuture,\n          maxDate = _a.maxDate;\n      var now = utils.date();\n      return !utils.isAfter(utils.getStartOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : utils.date(maxDate)), _this.state.currentMonth);\n    };\n\n    _this.shouldDisableDate = function (day) {\n      var _a = _this.props,\n          disablePast = _a.disablePast,\n          disableFuture = _a.disableFuture,\n          shouldDisableDate = _a.shouldDisableDate,\n          utils = _a.utils;\n      return Boolean(disableFuture && utils.isAfterDay(day, utils.date()) || disablePast && utils.isBeforeDay(day, utils.date()) || _this.validateMinMaxDate(day) || shouldDisableDate && shouldDisableDate(day));\n    };\n\n    _this.moveToDay = function (day) {\n      if (day && !_this.shouldDisableDate(day)) {\n        _this.onDateSelect(day, false);\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      var _a = _this.props,\n          theme = _a.theme,\n          date = _a.date,\n          utils = _a.utils;\n\n      switch (keycode_1.default(event)) {\n        case 'up':\n          _this.moveToDay(utils.addDays(date, -7));\n\n          break;\n\n        case 'down':\n          _this.moveToDay(utils.addDays(date, 7));\n\n          break;\n\n        case 'left':\n          theme.direction === 'ltr' ? _this.moveToDay(utils.addDays(date, -1)) : _this.moveToDay(utils.addDays(date, 1));\n          break;\n\n        case 'right':\n          theme.direction === 'ltr' ? _this.moveToDay(utils.addDays(date, 1)) : _this.moveToDay(utils.addDays(date, -1));\n          break;\n\n        default:\n          // if keycode is not handled, stop execution\n          return;\n      } // if event was handled prevent other side effects (e.g. page scroll)\n\n\n      event.preventDefault();\n    };\n\n    _this.renderWeeks = function () {\n      var utils = _this.props.utils;\n      var currentMonth = _this.state.currentMonth;\n      var weeks = utils.getWeekArray(currentMonth);\n      return weeks.map(function (week) {\n        return React.createElement(\"div\", {\n          key: \"week-\" + week[0].toString(),\n          className: _this.props.classes.week\n        }, _this.renderDays(week));\n      });\n    };\n\n    _this.renderDays = function (week) {\n      var _a = _this.props,\n          date = _a.date,\n          renderDay = _a.renderDay,\n          utils = _a.utils;\n      var selectedDate = utils.startOfDay(date);\n      var currentMonthNumber = utils.getMonth(_this.state.currentMonth);\n      var now = utils.date();\n      return week.map(function (day) {\n        var disabled = _this.shouldDisableDate(day);\n\n        var dayInCurrentMonth = utils.getMonth(day) === currentMonthNumber;\n        var dayComponent = React.createElement(Day_1.default, {\n          current: utils.isSameDay(day, now),\n          hidden: !dayInCurrentMonth,\n          disabled: disabled,\n          selected: utils.isSameDay(selectedDate, day)\n        }, utils.getDayText(day));\n\n        if (renderDay) {\n          dayComponent = renderDay(day, selectedDate, dayInCurrentMonth, dayComponent);\n        }\n\n        return React.createElement(DayWrapper_1.default, {\n          key: day.toString(),\n          value: day,\n          dayInCurrentMonth: dayInCurrentMonth,\n          disabled: disabled,\n          onSelect: _this.onDateSelect\n        }, dayComponent);\n      });\n    };\n\n    return _this;\n  }\n\n  Calendar.getDerivedStateFromProps = function (nextProps, state) {\n    if (!nextProps.utils.isEqual(nextProps.date, state.lastDate)) {\n      return {\n        lastDate: nextProps.date,\n        currentMonth: nextProps.utils.getStartOfMonth(nextProps.date)\n      };\n    }\n\n    return null;\n  };\n\n  Calendar.prototype.componentDidMount = function () {\n    var _a = this.props,\n        date = _a.date,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        utils = _a.utils,\n        disableFuture = _a.disableFuture,\n        disablePast = _a.disablePast;\n\n    if (this.shouldDisableDate(date)) {\n      this.onDateSelect(date_utils_1.findClosestEnabledDate({\n        date: date,\n        utils: utils,\n        minDate: minDate,\n        maxDate: maxDate,\n        disablePast: Boolean(disablePast),\n        disableFuture: Boolean(disablePast),\n        shouldDisableDate: this.shouldDisableDate\n      }), false);\n    }\n  };\n\n  Calendar.prototype.render = function () {\n    var _a = this.state,\n        currentMonth = _a.currentMonth,\n        slideDirection = _a.slideDirection;\n    var _b = this.props,\n        classes = _b.classes,\n        utils = _b.utils,\n        allowKeyboardControl = _b.allowKeyboardControl;\n    return React.createElement(React.Fragment, null, allowKeyboardControl && React.createElement(react_event_listener_1.default, {\n      target: \"window\",\n      onKeyDown: this.handleKeyDown\n    }), React.createElement(CalendarHeader_1.default, {\n      slideDirection: slideDirection,\n      currentMonth: currentMonth,\n      onMonthChange: this.handleChangeMonth,\n      leftArrowIcon: this.props.leftArrowIcon,\n      rightArrowIcon: this.props.rightArrowIcon,\n      disablePrevMonth: this.shouldDisablePrevMonth(),\n      disableNextMonth: this.shouldDisableNextMonth()\n    }), React.createElement(SlideTransition_1.default, {\n      slideDirection: slideDirection,\n      transKey: currentMonth.toString(),\n      className: classes.transitionContainer\n    }, React.createElement(\"div\", {\n      // @ts-ignore Autofocus required for getting work keyboard navigation feature\n      autoFocus: true\n    }, this.renderWeeks())));\n  };\n\n  Calendar.propTypes = {\n    date: PropTypes.object.isRequired,\n    minDate: prop_types_1.default.date,\n    maxDate: prop_types_1.default.date,\n    classes: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disablePast: PropTypes.bool,\n    disableFuture: PropTypes.bool,\n    leftArrowIcon: PropTypes.node,\n    rightArrowIcon: PropTypes.node,\n    renderDay: PropTypes.func,\n    theme: PropTypes.object.isRequired,\n    shouldDisableDate: PropTypes.func,\n    utils: PropTypes.object.isRequired,\n    allowKeyboardControl: PropTypes.bool,\n    innerRef: PropTypes.any\n  };\n  Calendar.defaultProps = {\n    minDate: '1900-01-01',\n    maxDate: '2100-01-01',\n    disablePast: false,\n    disableFuture: false,\n    leftArrowIcon: undefined,\n    rightArrowIcon: undefined,\n    renderDay: undefined,\n    allowKeyboardControl: false,\n    shouldDisableDate: function shouldDisableDate() {\n      return false;\n    }\n  };\n  return Calendar;\n}(React.Component);\n\nexports.Calendar = Calendar;\n\nvar styles = function styles(theme) {\n  return {\n    transitionContainer: {\n      minHeight: 36 * 6,\n      marginTop: theme.spacing.unit * 1.5\n    },\n    week: {\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  };\n};\n\nexports.default = withStyles_1.default(styles, {\n  name: 'MuiPickersCalendar',\n  withTheme: true\n})(WithUtils_1.withUtils()(Calendar));","map":null,"metadata":{},"sourceType":"script"}