{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar withStyles_1 = __importDefault(require(\"@material-ui/core/styles/withStyles\"));\n\nvar classnames_1 = __importDefault(require(\"classnames\"));\n\nvar PropTypes = __importStar(require(\"prop-types\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar createStyles_1 = __importDefault(require(\"@material-ui/core/styles/createStyles\"));\n\nvar time_utils_1 = require(\"../_helpers/time-utils\");\n\nvar PickerToolbar_1 = __importDefault(require(\"../_shared/PickerToolbar\"));\n\nvar ToolbarButton_1 = __importDefault(require(\"../_shared/ToolbarButton\"));\n\nvar WithUtils_1 = require(\"../_shared/WithUtils\");\n\nvar ClockType_1 = __importDefault(require(\"../constants/ClockType\"));\n\nvar TimePickerView_1 = __importDefault(require(\"./components/TimePickerView\"));\n\nvar TimePicker =\n/** @class */\nfunction (_super) {\n  __extends(TimePicker, _super);\n\n  function TimePicker() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      openView: ClockType_1.default.HOURS,\n      meridiemMode: _this.props.utils.getHours(_this.props.date) >= 12 ? 'pm' : 'am'\n    };\n\n    _this.setMeridiemMode = function (mode) {\n      return function () {\n        _this.setState({\n          meridiemMode: mode\n        }, function () {\n          return _this.handleChange({\n            time: _this.props.date,\n            isFinish: false,\n            openMinutes: false,\n            openSeconds: false\n          });\n        });\n      };\n    };\n\n    _this.handleChange = function (_a) {\n      var time = _a.time,\n          isFinish = _a.isFinish,\n          openMinutes = _a.openMinutes,\n          openSeconds = _a.openSeconds;\n      var withMeridiem = time_utils_1.convertToMeridiem(time, _this.state.meridiemMode, Boolean(_this.props.ampm), _this.props.utils);\n\n      if (isFinish) {\n        if (!openMinutes && !openSeconds) {\n          _this.props.onChange(withMeridiem, isFinish);\n\n          return;\n        }\n\n        if (openMinutes) {\n          _this.openMinutesView();\n        }\n\n        if (openSeconds) {\n          _this.openSecondsView();\n        }\n      }\n\n      _this.props.onChange(withMeridiem, false);\n    };\n\n    _this.handleHourChange = function (time, isFinish) {\n      _this.handleChange({\n        time: time,\n        isFinish: isFinish,\n        openMinutes: true,\n        openSeconds: false\n      });\n    };\n\n    _this.handleMinutesChange = function (time, isFinish) {\n      _this.handleChange({\n        time: time,\n        isFinish: isFinish,\n        openMinutes: false,\n        openSeconds: Boolean(_this.props.seconds)\n      });\n    };\n\n    _this.handleSecondsChange = function (time, isFinish) {\n      _this.handleChange({\n        time: time,\n        isFinish: isFinish,\n        openMinutes: false,\n        openSeconds: false\n      });\n    };\n\n    _this.openSecondsView = function () {\n      _this.setState({\n        openView: ClockType_1.default.SECONDS\n      });\n    };\n\n    _this.openMinutesView = function () {\n      _this.setState({\n        openView: ClockType_1.default.MINUTES\n      });\n    };\n\n    _this.openHourView = function () {\n      _this.setState({\n        openView: ClockType_1.default.HOURS\n      });\n    };\n\n    return _this;\n  }\n\n  TimePicker.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        classes = _b.classes,\n        theme = _b.theme,\n        date = _b.date,\n        utils = _b.utils,\n        ampm = _b.ampm,\n        seconds = _b.seconds;\n    var _c = this.state,\n        meridiemMode = _c.meridiemMode,\n        openView = _c.openView;\n    var rtl = theme.direction === 'rtl';\n    var hourMinuteClassName = rtl ? classes.hourMinuteLabelReverse : classes.hourMinuteLabel;\n    return React.createElement(React.Fragment, null, React.createElement(PickerToolbar_1.default, {\n      className: classnames_1.default(classes.toolbar, (_a = {}, _a[classes.toolbarLeftPadding] = ampm, _a))\n    }, React.createElement(\"div\", {\n      className: hourMinuteClassName\n    }, React.createElement(ToolbarButton_1.default, {\n      variant: \"h2\",\n      onClick: this.openHourView,\n      selected: openView === ClockType_1.default.HOURS,\n      label: utils.getHourText(date, Boolean(ampm))\n    }), React.createElement(ToolbarButton_1.default, {\n      variant: \"h2\",\n      label: \":\",\n      selected: false,\n      className: classes.separator\n    }), React.createElement(ToolbarButton_1.default, {\n      variant: \"h2\",\n      onClick: this.openMinutesView,\n      selected: openView === ClockType_1.default.MINUTES,\n      label: utils.getMinuteText(date)\n    }), seconds && React.createElement(React.Fragment, null, React.createElement(ToolbarButton_1.default, {\n      variant: \"h2\",\n      label: \":\",\n      selected: false,\n      className: classes.separator\n    }), React.createElement(ToolbarButton_1.default, {\n      variant: \"h2\",\n      onClick: this.openSecondsView,\n      selected: openView === ClockType_1.default.SECONDS,\n      label: utils.getSecondText(date)\n    }))), ampm && React.createElement(\"div\", {\n      className: seconds ? classes.ampmSelectionWithSeconds : classes.ampmSelection\n    }, React.createElement(ToolbarButton_1.default, {\n      className: classes.ampmLabel,\n      selected: meridiemMode === 'am',\n      variant: \"subtitle1\",\n      label: utils.getMeridiemText('am'),\n      onClick: this.setMeridiemMode('am')\n    }), React.createElement(ToolbarButton_1.default, {\n      className: classes.ampmLabel,\n      selected: meridiemMode === 'pm',\n      variant: \"subtitle1\",\n      label: utils.getMeridiemText('pm'),\n      onClick: this.setMeridiemMode('pm')\n    }))), this.props.children, React.createElement(TimePickerView_1.default, {\n      date: date,\n      type: this.state.openView,\n      ampm: ampm,\n      onHourChange: this.handleHourChange,\n      onMinutesChange: this.handleMinutesChange,\n      onSecondsChange: this.handleSecondsChange\n    }));\n  };\n\n  TimePicker.propTypes = {\n    date: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired,\n    classes: PropTypes.object.isRequired,\n    theme: PropTypes.object.isRequired,\n    children: PropTypes.node,\n    utils: PropTypes.object.isRequired,\n    ampm: PropTypes.bool,\n    seconds: PropTypes.bool,\n    innerRef: PropTypes.any\n  };\n  TimePicker.defaultProps = {\n    children: null,\n    ampm: true,\n    seconds: false\n  };\n  return TimePicker;\n}(React.Component);\n\nexports.TimePicker = TimePicker;\n\nvar styles = function styles() {\n  return createStyles_1.default({\n    toolbar: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    toolbarLeftPadding: {\n      paddingLeft: 50\n    },\n    separator: {\n      margin: '0 4px 0 2px',\n      cursor: 'default'\n    },\n    ampmSelection: {\n      marginLeft: 20,\n      marginRight: -20\n    },\n    ampmSelectionWithSeconds: {\n      marginLeft: 15,\n      marginRight: 10\n    },\n    ampmLabel: {\n      fontSize: 18\n    },\n    hourMinuteLabel: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-end'\n    },\n    hourMinuteLabelReverse: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-end',\n      flexDirection: 'row-reverse'\n    }\n  });\n};\n\nexports.default = withStyles_1.default(styles, {\n  withTheme: true,\n  name: 'MuiPickersTimePicker'\n})(WithUtils_1.withUtils()(TimePicker));","map":null,"metadata":{},"sourceType":"script"}