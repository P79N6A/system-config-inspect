{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Icon_1 = __importDefault(require(\"@material-ui/core/Icon\"));\n\nvar IconButton_1 = __importDefault(require(\"@material-ui/core/IconButton\"));\n\nvar InputAdornment_1 = __importDefault(require(\"@material-ui/core/InputAdornment\"));\n\nvar TextField_1 = __importDefault(require(\"@material-ui/core/TextField\"));\n\nvar PropTypes = __importStar(require(\"prop-types\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar prop_types_1 = __importDefault(require(\"../constants/prop-types\"));\n\nvar MaskedInput_1 = __importDefault(require(\"./MaskedInput\"));\n\nvar WithUtils_1 = require(\"./WithUtils\");\n\nvar getDisplayDate = function getDisplayDate(_a) {\n  var utils = _a.utils,\n      value = _a.value,\n      format = _a.format,\n      invalidLabel = _a.invalidLabel,\n      emptyLabel = _a.emptyLabel,\n      labelFunc = _a.labelFunc;\n  var isEmpty = value === null;\n  var date = utils.date(value);\n\n  if (labelFunc) {\n    return labelFunc(isEmpty ? null : date, invalidLabel);\n  }\n\n  if (isEmpty) {\n    return emptyLabel;\n  }\n\n  return utils.isValid(date) ? utils.format(date, format) : invalidLabel;\n};\n\nvar getError = function getError(value, props) {\n  var utils = props.utils,\n      maxDate = props.maxDate,\n      minDate = props.minDate,\n      disablePast = props.disablePast,\n      disableFuture = props.disableFuture,\n      maxDateMessage = props.maxDateMessage,\n      minDateMessage = props.minDateMessage,\n      invalidDateMessage = props.invalidDateMessage;\n\n  if (!utils.isValid(value)) {\n    // if null - do not show error\n    if (utils.isNull(value)) {\n      return '';\n    }\n\n    return invalidDateMessage;\n  }\n\n  if (maxDate && utils.isAfter(value, utils.endOfDay(utils.date(maxDate))) || disableFuture && utils.isAfter(value, utils.endOfDay(utils.date()))) {\n    return maxDateMessage;\n  }\n\n  if (minDate && utils.isBefore(value, utils.startOfDay(utils.date(minDate))) || disablePast && utils.isBefore(value, utils.startOfDay(utils.date()))) {\n    return minDateMessage;\n  }\n\n  return '';\n};\n\nvar DateTextField =\n/** @class */\nfunction (_super) {\n  __extends(DateTextField, _super);\n\n  function DateTextField() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = DateTextField.updateState(_this.props);\n\n    _this.commitUpdates = function (value) {\n      var _a = _this.props,\n          clearable = _a.clearable,\n          onClear = _a.onClear,\n          utils = _a.utils,\n          format = _a.format,\n          onError = _a.onError;\n\n      if (value === '') {\n        if (_this.props.value === null) {\n          _this.setState(DateTextField.updateState(_this.props));\n        } else if (clearable && onClear) {\n          onClear();\n        }\n\n        return;\n      }\n\n      var oldValue = utils.date(_this.state.value);\n      var newValue = utils.parse(value, format);\n      var error = getError(newValue, _this.props);\n\n      _this.setState({\n        error: error,\n        displayValue: value,\n        value: error ? newValue : oldValue\n      }, function () {\n        if (!error && !utils.isEqual(newValue, oldValue)) {\n          _this.props.onChange(newValue);\n        }\n\n        if (error && onError) {\n          onError(newValue, error);\n        }\n      });\n    };\n\n    _this.handleBlur = function (e) {\n      if (_this.props.keyboard) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.commitUpdates(e.target.value);\n\n        if (_this.props.onBlur) {\n          _this.props.onBlur(e);\n        }\n      }\n    };\n\n    _this.handleChange = function (e) {\n      var _a = _this.props,\n          utils = _a.utils,\n          format = _a.format,\n          onInputChange = _a.onInputChange;\n      var parsedValue = utils.parse(e.target.value, format);\n\n      if (onInputChange) {\n        onInputChange(e);\n      }\n\n      _this.setState({\n        displayValue: e.target.value,\n        error: getError(parsedValue, _this.props)\n      });\n    };\n\n    _this.handleFocus = function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (!_this.props.keyboard) {\n        _this.openPicker(e);\n      }\n    };\n\n    _this.handleKeyPress = function (e) {\n      if (e.key === 'Enter') {\n        if (!_this.props.disableOpenOnEnter) {\n          _this.openPicker(e);\n        } else {\n          // @ts-ignore TODO check me\n          _this.commitUpdates(e.target.value);\n        }\n      }\n    };\n\n    _this.openPicker = function (e) {\n      var _a = _this.props,\n          disabled = _a.disabled,\n          onClick = _a.onClick;\n\n      if (!disabled) {\n        onClick(e);\n      }\n    };\n\n    return _this;\n  }\n\n  DateTextField.prototype.componentDidUpdate = function (prevProps) {\n    if (!this.props.utils.isEqual(this.props.value, prevProps.value) || prevProps.format !== this.props.format || prevProps.maxDate !== this.props.maxDate || prevProps.minDate !== this.props.minDate || prevProps.emptyLabel !== this.props.emptyLabel || prevProps.utils !== this.props.utils) {\n      /* eslint-disable-next-line react/no-did-update-set-state */\n      this.setState(DateTextField.updateState(this.props));\n    }\n  };\n\n  DateTextField.prototype.render = function () {\n    var _a = this.props,\n        adornmentPosition = _a.adornmentPosition,\n        clearable = _a.clearable,\n        disabled = _a.disabled,\n        disableFuture = _a.disableFuture,\n        disableOpenOnEnter = _a.disableOpenOnEnter,\n        disablePast = _a.disablePast,\n        emptyLabel = _a.emptyLabel,\n        format = _a.format,\n        InputAdornmentProps = _a.InputAdornmentProps,\n        InputProps = _a.InputProps,\n        invalidDateMessage = _a.invalidDateMessage,\n        invalidLabel = _a.invalidLabel,\n        keyboard = _a.keyboard,\n        keyboardIcon = _a.keyboardIcon,\n        labelFunc = _a.labelFunc,\n        mask = _a.mask,\n        maxDate = _a.maxDate,\n        maxDateMessage = _a.maxDateMessage,\n        minDate = _a.minDate,\n        minDateMessage = _a.minDateMessage,\n        onBlur = _a.onBlur,\n        onClear = _a.onClear,\n        onClick = _a.onClick,\n        pipe = _a.pipe,\n        TextFieldComponent = _a.TextFieldComponent,\n        utils = _a.utils,\n        value = _a.value,\n        onInputChange = _a.onInputChange,\n        other = __rest(_a, [\"adornmentPosition\", \"clearable\", \"disabled\", \"disableFuture\", \"disableOpenOnEnter\", \"disablePast\", \"emptyLabel\", \"format\", \"InputAdornmentProps\", \"InputProps\", \"invalidDateMessage\", \"invalidLabel\", \"keyboard\", \"keyboardIcon\", \"labelFunc\", \"mask\", \"maxDate\", \"maxDateMessage\", \"minDate\", \"minDateMessage\", \"onBlur\", \"onClear\", \"onClick\", \"pipe\", \"TextFieldComponent\", \"utils\", \"value\", \"onInputChange\"]);\n\n    var _b = this.state,\n        displayValue = _b.displayValue,\n        error = _b.error;\n    var localInputProps = {\n      inputComponent: MaskedInput_1.default,\n      inputProps: {\n        mask: !keyboard ? null : mask,\n        pipe: !keyboard ? null : pipe,\n        readOnly: !keyboard\n      }\n    };\n\n    if (keyboard) {\n      localInputProps[adornmentPosition + \"Adornment\"] = React.createElement(InputAdornment_1.default, __assign({\n        position: adornmentPosition\n      }, InputAdornmentProps), React.createElement(IconButton_1.default, {\n        disabled: disabled,\n        onClick: this.openPicker\n      }, React.createElement(Icon_1.default, null, \" \", keyboardIcon, \" \")));\n    }\n\n    var Component = TextFieldComponent;\n\n    var inputProps = __assign({}, localInputProps, InputProps);\n\n    return React.createElement(Component, __assign({\n      onClick: this.handleFocus,\n      error: !!error,\n      helperText: error,\n      onKeyPress: this.handleKeyPress,\n      onBlur: this.handleBlur,\n      disabled: disabled,\n      value: displayValue\n    }, other, {\n      onError: undefined,\n      onChange: this.handleChange,\n      InputProps: inputProps\n    }));\n  };\n\n  DateTextField.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)]),\n    minDate: prop_types_1.default.date,\n    maxDate: prop_types_1.default.date,\n    disablePast: PropTypes.bool,\n    disableFuture: PropTypes.bool,\n    format: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func,\n    onClick: PropTypes.func.isRequired,\n    clearable: PropTypes.bool,\n    utils: PropTypes.object.isRequired,\n    disabled: PropTypes.bool,\n    InputProps: PropTypes.shape({}),\n\n    /** Input mask, used in keyboard mode read more <a href=\"https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme\">here</a> */\n    mask: PropTypes.any,\n\n    /** Error message, shown if date is less then minimal date */\n    minDateMessage: PropTypes.node,\n\n    /** Error message, shown if date is more then maximal date */\n    maxDateMessage: PropTypes.node,\n\n    /** Message displaying in text field, if date is invalid (doesn't work in keyboard mode) */\n    invalidLabel: PropTypes.string,\n\n    /** Message displaying in text field, if null passed (doesn't work in keyboard mode) */\n    emptyLabel: PropTypes.string,\n\n    /** Dynamic label generation function [(date: Date, invalidLabel: string) => string] */\n    labelFunc: PropTypes.func,\n\n    /** On/off manual keyboard input mode */\n    keyboard: PropTypes.bool,\n\n    /** Icon displayed for open picker button in keyboard mode */\n    keyboardIcon: PropTypes.node,\n\n    /** enables/disable automatic opening of the picker when the user clicks enter */\n    disableOpenOnEnter: PropTypes.bool,\n\n    /** Message, appearing when date cannot be parsed */\n    invalidDateMessage: PropTypes.node,\n\n    /** Component that should replace the default Material-UI TextField */\n    TextFieldComponent: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    /** Props to pass to keyboard input adornment */\n    InputAdornmentProps: PropTypes.object,\n\n    /** Specifies position of keyboard button adornment */\n    adornmentPosition: PropTypes.oneOf(['start', 'end']),\n\n    /**\n     * Callback firing when date that applied in the keyboard is invalid\n     *  [(error: string) => void]\n     */\n    onError: PropTypes.func,\n\n    /** Callback firing on change input in keyboard mode [(e: Event) => void] */\n    onInputChange: PropTypes.func,\n    pipe: PropTypes.func\n  };\n  DateTextField.defaultProps = {\n    disabled: false,\n    invalidLabel: 'Unknown',\n    emptyLabel: '',\n    value: new Date(),\n    labelFunc: undefined,\n    format: undefined,\n    InputProps: undefined,\n    keyboard: false,\n    mask: undefined,\n    keyboardIcon: 'event',\n    disableOpenOnEnter: false,\n    invalidDateMessage: 'Invalid Date Format',\n    clearable: false,\n    onBlur: undefined,\n    onClear: undefined,\n    disablePast: false,\n    disableFuture: false,\n    onError: undefined,\n    onInputChange: undefined,\n    minDate: '1900-01-01',\n    maxDate: '2100-01-01',\n    minDateMessage: 'Date should not be before minimal date',\n    maxDateMessage: 'Date should not be after maximal date',\n    TextFieldComponent: TextField_1.default,\n    InputAdornmentProps: {},\n    adornmentPosition: 'end',\n    pipe: undefined\n  };\n\n  DateTextField.updateState = function (props) {\n    return {\n      value: props.value,\n      displayValue: getDisplayDate(props),\n      error: getError(props.utils.date(props.value), props)\n    };\n  };\n\n  return DateTextField;\n}(React.PureComponent);\n\nexports.DateTextField = DateTextField; // @ts-ignore ts requires to duplicate proptypes of textfield\n\nexports.default = WithUtils_1.withUtils()(DateTextField);","map":null,"metadata":{},"sourceType":"script"}